{"version":3,"sources":["components/Сarousel/Carousel.js","components/СarouselSetting/СarouselSetting.jsx","App.js","index.js"],"names":["Carousel","state","moveIndex","showImage","props","roots","correctionImage","correctionMoveIndex","moveBack","step","infinite","imgNumber","length","setState","currentMove","slice","reverse","moveForward","frameSize","maxMoveIndex","prevProps","this","itemWidth","animationDuration","frameStyle","width","height","imgStyle","listStyle","transition","transform","marginLeft","className","style","map","root","key","src","alt","type","onClick","React","Component","CarouselSetting","formList","id","event","target","checked","value","alert","Number","action","htmlFor","onChange","changeSetting","App","images","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.210a1135.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Carousel.scss';\n\nclass Carousel extends React.Component {\n  state = {\n    moveIndex: 0,\n    showImage: this.props.roots,\n    correctionImage: 0,\n    correctionMoveIndex: 0,\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.infinite === true && this.props.infinite === false) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        showImage: this.props.roots,\n        correctionImage: 0,\n        moveIndex: 0,\n        correctionMoveIndex: 0,\n      });\n    }\n  }\n\n  moveBack = () => {\n    const { step, roots, infinite } = this.props;\n    const imgNumber = roots.length;\n\n    this.setState((state) => {\n      const {\n        showImage,\n        correctionImage,\n        moveIndex,\n        correctionMoveIndex,\n      } = state;\n      let currentMove = moveIndex - step;\n\n      if (currentMove + correctionMoveIndex < 0 && infinite) {\n        return {\n          showImage: [\n            ...showImage.slice(imgNumber - step).reverse(),\n            ...showImage.slice(0, imgNumber - step),\n          ],\n          moveIndex: moveIndex - step,\n          correctionImage: correctionImage - step,\n          correctionMoveIndex: correctionMoveIndex + step,\n        };\n      }\n\n      if (currentMove < 0) {\n        currentMove = 0;\n      }\n\n      return { moveIndex: currentMove };\n    });\n  };\n\n  moveForward = () => {\n    const { step, roots, frameSize, infinite } = this.props;\n    const imgNumber = roots.length;\n    const maxMoveIndex = imgNumber - frameSize;\n\n    this.setState((state) => {\n      const {\n        moveIndex,\n        correctionMoveIndex,\n        showImage,\n        correctionImage,\n      } = state;\n      let currentMove = moveIndex + step;\n\n      if (currentMove + correctionMoveIndex > maxMoveIndex && infinite) {\n        return {\n          showImage: [\n            ...showImage.slice(step),\n            ...showImage.slice(0, step).reverse(),\n          ],\n          moveIndex: currentMove,\n          correctionImage: correctionImage + step,\n          correctionMoveIndex: correctionMoveIndex - step,\n        };\n      }\n\n      if (currentMove > maxMoveIndex) {\n        currentMove = maxMoveIndex;\n      }\n\n      return { moveIndex: currentMove };\n    });\n  };\n\n  render() {\n    const { itemWidth, frameSize, animationDuration } = this.props;\n    const { moveIndex, showImage, correctionImage } = this.state;\n\n    const frameWidth = itemWidth * frameSize;\n    const frameStyle = {\n      width: `${frameWidth}px`,\n      height: `${itemWidth}px`,\n    };\n    const imgStyle = {\n      width: `${itemWidth}px`,\n    };\n    const listStyle = {\n      transition: `transform ${animationDuration}ms`,\n      transform: `translateX(${-(moveIndex * itemWidth)}px)`,\n      marginLeft: `${correctionImage * itemWidth}px`,\n    };\n\n    return (\n      <div className=\"carousel\">\n        <div\n          className=\"frame\"\n          style={frameStyle}\n        >\n          <ul\n            className=\"carousel_list\"\n            style={listStyle}\n          >\n            {showImage.map(root => (\n              <li key={root} className=\"carousel_item\">\n                <img\n                  src={root}\n                  alt=\"emoji\"\n                  className=\"carousel_img\"\n                  style={imgStyle}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"button_wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={this.moveBack}\n          >\n            👈\n          </button>\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={this.moveForward}\n          >\n            👉\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nCarousel.propTypes = {\n  itemWidth: PropTypes.number.isRequired,\n  frameSize: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  animationDuration: PropTypes.number.isRequired,\n  infinite: PropTypes.bool.isRequired,\n  roots: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './СarouselSetting.scss';\nimport PropTypes from 'prop-types';\nimport Carousel from '../Сarousel/Carousel';\n\nclass CarouselSetting extends React.Component {\n  state = {\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  formList = [\n    {\n      id: 'itemWidth',\n    },\n    {\n      id: 'frameSize',\n    },\n    {\n      id: 'step',\n    },\n    {\n      id: 'animationDuration',\n    },\n  ];\n\n  changeSetting(event) {\n    const { id, checked, value, type } = event.target;\n    const { infinite } = this.state;\n\n    if (type !== 'checkbox' && infinite) {\n      alert(\"You can't change setting when infinite checked\");\n\n      return;\n    }\n\n    switch (id) {\n      case 'itemWidth':\n        if (value < 0 || value > 500) {\n          alert('max 500, min 0');\n\n          return;\n        }\n\n        break;\n\n      case 'frameSize':\n      case 'step':\n        if (value > 5) {\n          alert('max 5');\n\n          return;\n        }\n\n        break;\n\n      default:\n    }\n\n    if (event.target.id === 'infinite') {\n      this.setState({ [id]: checked });\n    } else {\n      this.setState({ [id]: Number(value) });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Carousel {...this.state} roots={this.props.roots} />\n        <form action=\"get\" className=\"form\">\n          {this.formList.map(({ id }) => (\n            <label htmlFor={id} className=\"label\" key={id}>\n              <span>\n                {id}\n                :\n              </span>\n              <input\n                className=\"input\"\n                id={id}\n                type=\"number\"\n                value={this.state[id] === 0 ? '' : this.state[id]}\n                onChange={event => this.changeSetting(event)}\n              />\n            </label>\n          ))}\n          <label htmlFor=\"infinite\" className=\"label\">\n            infinite :\n            <input\n              className=\"input\"\n              type=\"checkbox\"\n              id=\"infinite\"\n              onChange={event => this.changeSetting(event)}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nCarouselSetting.propTypes = {\n  roots: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default CarouselSetting;\n","import React from 'react';\nimport './App.scss';\n\nimport CarouselSetting from './components/СarouselSetting/СarouselSetting';\n\nclass App extends React.Component {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CarouselSetting roots={this.state.images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}