{"version":3,"sources":["components/Сarousel/Carousel.js","components/СarouselSetting/СarouselSetting.jsx","App.js","index.js"],"names":["Carousel","state","moveIndex","moveBack","props","step","roots","infinite","frameSize","imgNumber","length","setState","currentMove","moveForward","maxMoveIndex","this","itemWidth","animationDuration","frameStyle","width","height","imgStyle","listStyle","transition","transform","className","style","map","root","key","src","alt","type","onClick","React","Component","CarouselSetting","formList","id","min","max","event","target","checked","Number","value","action","htmlFor","defaultValue","onChange","changeSet","defaultChecked","App","images","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.821a8a02.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Carousel.scss';\n\nclass Carousel extends React.Component {\n  state = {\n    moveIndex: 0,\n  };\n\n  moveBack = () => {\n    const { step, roots, infinite, frameSize } = this.props;\n    const imgNumber = roots.length;\n\n    this.setState(({ moveIndex }) => {\n      let currentMove = moveIndex - step;\n\n      if (moveIndex === 0 && infinite) {\n        currentMove = imgNumber - frameSize;\n      }\n\n      if (currentMove < 0) {\n        currentMove = 0;\n      }\n\n      return { moveIndex: currentMove };\n    });\n  };\n\n  moveForward = () => {\n    const { step, roots, frameSize, infinite } = this.props;\n    const imgNumber = roots.length;\n    const maxMoveIndex = imgNumber - frameSize;\n\n    this.setState(({ moveIndex }) => {\n      let currentMove = moveIndex + step;\n\n      if (moveIndex === maxMoveIndex && infinite) {\n        currentMove = 0;\n      }\n\n      if (currentMove > maxMoveIndex) {\n        currentMove = maxMoveIndex;\n      }\n\n      return { moveIndex: currentMove };\n    });\n  };\n\n  render() {\n    const { roots, itemWidth, frameSize, animationDuration } = this.props;\n    const { moveIndex } = this.state;\n\n    const frameWidth = itemWidth * frameSize;\n    const frameStyle = {\n      width: `${frameWidth}px`,\n      height: `${itemWidth}px`,\n    };\n    const imgStyle = {\n      width: `${itemWidth}px`,\n    };\n    const listStyle = {\n      transition: `transform ${animationDuration}ms`,\n      transform: `translateX(-${moveIndex * itemWidth}px)`,\n    };\n\n    return (\n      <div className=\"carousel\">\n        <div\n          className=\"frame\"\n          style={frameStyle}\n        >\n          <ul\n            className=\"carousel_list\"\n            style={listStyle}\n          >\n            {roots.map(root => (\n              <li key={root} className=\"carousel_item\">\n                <img\n                  src={root}\n                  alt=\"emoji\"\n                  className=\"carousel_img\"\n                  style={imgStyle}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"button_wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={this.moveBack}\n          >\n            👈\n          </button>\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={this.moveForward}\n          >\n            👉\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nCarousel.propTypes = {\n  itemWidth: PropTypes.number.isRequired,\n  frameSize: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  animationDuration: PropTypes.number.isRequired,\n  infinite: PropTypes.bool.isRequired,\n  roots: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './СarouselSetting.scss';\nimport PropTypes from 'prop-types';\nimport Carousel from '../Сarousel/Carousel';\n\nclass CarouselSetting extends React.Component {\n  state = {\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  }\n\n  formList = [\n    {\n      id: 'itemWidth', min: 0, max: 500,\n    },\n    {\n      id: 'frameSize', min: 1, max: 5,\n    },\n    {\n      id: 'step', min: 1, max: 5,\n    },\n    {\n      id: 'animationDuration', min: 1000, max: 10000,\n    },\n  ]\n\n  changeSet(event) {\n    if (event.target.id === 'infinite') {\n      this.setState({ [event.target.id]: event.target.checked });\n    } else {\n      this.setState({ [event.target.id]: Number(event.target.value) });\n    }\n  }\n\n  render() {\n    const { infinite } = this.state;\n\n    return (\n      <div className=\"app\">\n        <Carousel {...this.state} roots={this.props.roots} />\n        <form action=\"get\" className=\"form\">\n          {this.formList.map(({ id, min, max }) => (\n            <label htmlFor={id} className=\"label\" key={id}>\n              <span>\n                {id}\n                {' '}\n                :\n              </span>\n              <input\n                className=\"input\"\n                type=\"number\"\n                id={id}\n                defaultValue={this.state[id]}\n                min={min}\n                max={max}\n                onChange={event => this.changeSet(event)}\n              />\n            </label>\n          ))}\n          <label htmlFor=\"infinite\" className=\"label\">\n            infinite :\n            <input\n              className=\"input\"\n              type=\"checkbox\"\n              id=\"infinite\"\n              defaultValue={infinite}\n              defaultChecked={false}\n              onChange={event => this.changeSet(event)}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nCarouselSetting.propTypes = {\n  roots: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default CarouselSetting;\n","import React from 'react';\nimport './App.scss';\n\nimport CarouselSetting from './components/СarouselSetting/СarouselSetting';\n\nclass App extends React.Component {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CarouselSetting roots={this.state.images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}